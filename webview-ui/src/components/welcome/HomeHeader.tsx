import AgentLogo from "@/assets/AgentLogo"
import ClineLogoVariable from "@/assets/ClineLogoVariable"
import HeroTooltip from "@/components/common/HeroTooltip"
import { useExtensionState } from "@/context/ExtensionStateContext"
import { agentName } from "@shared/Configuration"
import { ChatSettings } from "@shared/ChatSettings"
import { VSCodeLink } from "@vscode/webview-ui-toolkit/react"
import { useState, useEffect } from "react"

const HomeHeader = () => {
	const [isExpanded, setIsExpanded] = useState(() => {
		try {
			const saved = localStorage.getItem("homeHeader-isExpanded")
			return saved ? JSON.parse(saved) : false
		} catch (error) {
			console.warn("Failed to read homeHeader expansion state from localStorage:", error)
			return false
		}
	})

	// Save to localStorage whenever isExpanded changes
	useEffect(() => {
		try {
			localStorage.setItem("homeHeader-isExpanded", JSON.stringify(isExpanded))
		} catch (error) {
			console.warn("Failed to save homeHeader expansion state to localStorage:", error)
		}
	}, [isExpanded])

	const toggleExpanded = () => {
		setIsExpanded(!isExpanded)
	}

	const { navigateToSettings, navigateToHistory, setChatSettings, navigateToMcp } = useExtensionState()

	return (
		<div style={{ flexShrink: 0 }}>
			<style>
				{`
					.info-header {
						cursor: pointer;
						user-select: none;
					}
					.info-header:hover {
						opacity: 0.8;
					}
				`}
			</style>

			<div
				className="info-header"
				onClick={toggleExpanded}
				onKeyDown={(e) => {
					if (e.key === "Enter" || e.key === " ") {
						e.preventDefault()
						toggleExpanded()
					}
				}}
				role="button"
				tabIndex={0}
				aria-expanded={isExpanded}
				aria-label={`${isExpanded ? "Collapse" : "Expand"} overview section`}
				style={{
					color: "var(--vscode-descriptionForeground)",
					margin: "20px 20px 10px 20px",
					display: "flex",
					alignItems: "center",
				}}>
				<span
					className={`codicon codicon-chevron-${isExpanded ? "down" : "right"}`}
					style={{
						marginRight: "2px",
						transform: "scale(0.9)",
					}}></span>
				<span
					className="codicon codicon-info"
					style={{
						marginRight: "4px",
						transform: "scale(0.9)",
					}}></span>
				<span
					style={{
						fontWeight: 600,
						fontSize: "0.85em",
						textTransform: "uppercase",
					}}>
					Overview
				</span>
			</div>

			{isExpanded && (
				<div
					style={{
						paddingLeft: "0px",
						paddingRight: "5px",
						paddingBottom: "10px",
						marginLeft: "22px",
						marginRight: "0px",
						marginTop: "15px",
					}}>
					<div>
						<div
							style={{
								//display: "flex",
								//flexDirection: "column",
								alignItems: "left",
								textAlign: "left",
								//maxWidth: "350px",
							}}>
							<p
								style={{
									fontSize: "13px",
									lineHeight: "15px",
									marginLeft: "15px",
									marginRight: "15px",
									opacity: 0.9,
								}}>
								<div style={{ marginLeft: "-10px", marginBottom: "10px" }}>
									This is an essential overview of how to use {agentName} effectively. It provides a quick guide
									to the main features and functionalities:
								</div>
								<ul style={{ listStyleType: "disc", paddingLeft: 0, marginBlockStart: 0, marginBlockEnd: 0 }}>
									<style>
										{`
											ul > li {
												margin-bottom: 10px;
											}
										`}
									</style>
									<li>
										Use
										<VSCodeLink
											style={{ display: "inline" }}
											onClick={() => {
												setChatSettings({ mode: "plan" })
											}}>
											Plan
										</VSCodeLink>
										mode to iteratively construct a plan for a task, and
										<VSCodeLink
											style={{ display: "inline" }}
											onClick={() => {
												setChatSettings({ mode: "act" })
											}}>
											Act
										</VSCodeLink>
										mode to execute a task. You can choose to configure different models for each mode in{" "}
										<VSCodeLink
											onClick={() => {
												navigateToSettings()
											}}>
											settings
										</VSCodeLink>
										.
									</li>
									<li>
										Type "@" anywhere in a chat message to add references to workspace files, folders,
										terminal output, problems, or git commits.
									</li>
									<li>
										Start typing "/" in the chat to execute a built-in command or invoke active workflows.
									</li>
									<li>
										Use autogenerated checkpoints in the task's history to restore the task and/or workspace
										state to previous checkpoints. Edit a previous task message to undo changes and restart
										from that point.
									</li>
									<li>
										Always start a new task each time you have a new scope. Keep your task context specific to
										the same scope, so you can reuse it later.
									</li>
									<li>
										Use the "/New Task" command in a previous task, to start a new task with the context
										summary from the previous task.
									</li>
									<li>
										Use the "/Compact Task" command in a task with a large context window, to summarise the
										context window and reduce its size.
									</li>
									<li>
										Use the "/Git Instructions" or "/Git Workflows" commands to get instructions or workflows
										from git.
									</li>
									<li>
										Use
										<VSCodeLink
											style={{ display: "inline" }}
											onClick={() => {
												navigateToHistory()
											}}>
											task history
										</VSCodeLink>
										to filter, search, manage and switch between previous tasks at any time.
									</li>
									<li>
										Use the top bar controls to start a new empty task, manage{" "}
										<VSCodeLink
											style={{ display: "" }}
											onClick={() => {
												navigateToHistory()
											}}>
											task history
										</VSCodeLink>
										, configure{" "}
										<VSCodeLink
											style={{ display: "" }}
											onClick={() => {
												navigateToMcp()
											}}>
											MCP servers
										</VSCodeLink>
										, access{" "}
										<VSCodeLink
											style={{ display: "" }}
											onClick={() => {
												navigateToSettings()
											}}>
											settings
										</VSCodeLink>
										, and open new {agentName} instances for parallel tasks.
									</li>
									<li>
										Use the bottom chat bar controls to manage auto-approve settings, quickly enable or
										disable MCP servers, instructions or workflows, add file contents and pictures for capable
										models, or change the provider or model used to execute task requests.
									</li>
								</ul>
							</p>
						</div>
					</div>
				</div>
			)}
		</div>
	)
}

export default HomeHeader
